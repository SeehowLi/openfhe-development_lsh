#include <iostream>
#include <fstream>
#include <sstream>
#include <algorithm>
#include <iomanip>
#include <string>
#include <omp.h>
#include <chrono>

#include "nonlinearfunction/sorting-method.h"
#include "nonlinearfunction/sorting-utils.h"

using namespace lbcrypto;

// 全局变量
HomoEncryptCompute hec;
vector<double> input_values;
int n = 32;
double delta = 0.001;
int precision_digits = 3;
// bool toy = true;
bool toy = false;
SortingType sortingType = NONE;

// 全局变量来存储数据
vector<double> query_data;
vector<vector<double>> training_data;
vector<vector<double>> group1_data;  // 前32个
vector<vector<double>> group2_data;  // 中间32个
vector<vector<double>> group3_data;  // 后36个
vector<vector<double>> group4_data;  // 最后4个

vector<double> query_data_exp32;  //拓展的query_data
vector<double> training_data_1d;  // 前32个
vector<double> group1_1d;  // 前32个
vector<double> group2_1d;  // 中间32个
vector<double> group3_1d;  // 后32个
vector<double> group4_1d;  // 最后4个

// 时间测量辅助函数
class Timer {
private:
    std::chrono::high_resolution_clock::time_point start_time;
    std::string task_name;
    
public:
    Timer(const std::string& name) : task_name(name) {
        start_time = std::chrono::high_resolution_clock::now();
    }
    
    ~Timer() {
        auto end_time = std::chrono::high_resolution_clock::now();
        auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time);
        cout << "[TIMING] " << task_name << ": " << duration.count() << " ms" << std::endl;
    }
};

// 辅助函数：提取方括号内的数字
vector<double> extract_numbers(const string& str) {
    vector<double> numbers;
    stringstream ss(str);
    string token;
    
    while (getline(ss, token, ',')) {
        // 移除空格和方括号
        token.erase(remove_if(token.begin(), token.end(), 
                    [](char c) { return c == '[' || c == ']' || c == ' '; }), 
                    token.end());
        
        if (!token.empty()) {
            try {
                numbers.push_back(stod(token));
            } catch (...) {
                // 忽略无法转换的值
            }
        }
    }
    
    return numbers;
}

// 归一化函数
void normalize_query_and_training() {
    Timer timer("Normalization");
    
    // 现在假设数据分布的最大值是10.0
    double max_val = 10.0;
    double max_distance = sqrt(10.0) * 2 * max_val; // 计算最大距离，用于归一化
    cout << "Max distance for normalization: " << max_distance << std::endl;

    // OpenMP并行归一化
    #pragma omp parallel sections
    {
        #pragma omp section
        {
            // 归一化query_data
            for (double& v : query_data) {
                v /= max_distance;
            }
        }
        
        #pragma omp section
        {
            // 归一化training_data
            #pragma omp parallel for
            for (size_t i = 0; i < training_data.size(); i++) {
                for (double& v : training_data[i]) {
                    v /= max_distance;
                }
            }
        }
        
        #pragma omp section
        {
            // 归一化group1_data
            #pragma omp parallel for
            for (size_t i = 0; i < group1_data.size(); i++) {
                for (double& v : group1_data[i]) {
                    v /= max_distance;
                }
            }
        }
        
        #pragma omp section
        {
            // 归一化group2_data
            #pragma omp parallel for
            for (size_t i = 0; i < group2_data.size(); i++) {
                for (double& v : group2_data[i]) {
                    v /= max_distance;
                }
            }
        }
        
        #pragma omp section
        {
            // 归一化group3_data
            #pragma omp parallel for
            for (size_t i = 0; i < group3_data.size(); i++) {
                for (double& v : group3_data[i]) {
                    v /= max_distance;
                }
            }
        }
        
        #pragma omp section
        {
            // 归一化group4_data
            #pragma omp parallel for
            for (size_t i = 0; i < group4_data.size(); i++) {
                for (double& v : group4_data[i]) {
                    v /= max_distance;
                }
            }
        }
    }
}

// 读取jsonl数据
void read_data_json(string filename) {
    Timer timer("Reading JSON data");
    
    ifstream file(filename);
    if (!file.is_open()) {
        cerr << "Error opening file: " << filename << endl;
        return;
    }

    string line;
    while (getline(file, line)) {
        // 查找 "query" 字段
        size_t query_pos = line.find("\"query\":");
        if (query_pos != string::npos) {
            size_t start = line.find('[', query_pos);
            size_t end = line.find(']', start);
            if (start != string::npos && end != string::npos) {
                string query_str = line.substr(start, end - start + 1);
                query_data = extract_numbers(query_str);
            }
        }
        
        // 查找 "data" 字段
        size_t data_pos = line.find("\"data\":");
        if (data_pos != string::npos) {
            training_data.clear();
            size_t start = line.find('[', data_pos);
            size_t pos = start + 1;
            
            while (pos < line.length()) {
                size_t row_start = line.find('[', pos);
                if (row_start == string::npos) break;
                
                size_t row_end = line.find(']', row_start);
                if (row_end == string::npos) break;
                
                string row_str = line.substr(row_start, row_end - row_start + 1);
                vector<double> row_data = extract_numbers(row_str);
                
                if (!row_data.empty()) {
                    training_data.push_back(row_data);
                }
                
                pos = row_end + 1;
            }
        }
    }

    file.close();
    
    // 将数据分成三组
    if (training_data.size() >= 100) {
        // 清空之前的分组数据
        group1_data.clear();
        group2_data.clear();
        group3_data.clear();
        group4_data.clear();

        // 第一组：前32个 (索引 0-31)
        for (int i = 0; i < 32; i++) {
            group1_data.push_back(training_data[i]);
        }

        // 第二组：中间32个 (索引 32-63)
        for (int i = 32; i < 64; i++) {
            group2_data.push_back(training_data[i]);
        }

        // 第三组：后36个 (索引 64-95)
        for (int i = 64; i < 96; i++) {
            group3_data.push_back(training_data[i]);
        }

        // 第四组：后4个 (索引 96-99)
        for (int i = 96; i < 100; i++) {
            group4_data.push_back(training_data[i]);
        }
    }
    
    // 输出读取结果的统计信息
    cout << "Successfully read data from " << filename << endl;
    cout << "Query size: " << query_data.size() << endl;
    cout << "Total data size: " << training_data.size() << " x " 
         << (training_data.empty() ? 0 : training_data[0].size()) << endl;
    cout << "Group 1 size: " << group1_data.size() << endl;
    cout << "Group 2 size: " << group2_data.size() << endl;
    cout << "Group 3 size: " << group3_data.size() << endl;
    cout << "Group 4 size: " << group4_data.size() << endl;
}

// ================== 聚类算法，使得数据更有分布特征 ================== //

// 计算两个向量之间的欧氏距离
double euclidean_distance(const std::vector<double>& a, const std::vector<double>& b) {
    double sum = 0.0;
    for (size_t i = 0; i < a.size(); ++i) {
        double diff = a[i] - b[i];
        sum += diff * diff;
    }
    return std::sqrt(sum);
}

// ========================================================================================== //

// 将data拓展成128维度的向量
void expand_groups_dimension_inplace() {
    Timer timer("Expanding groups dimension");
    
    for (auto& vec : training_data) {
        vec.resize(128, 0.0);
    }
}

// 拓展query成128维度的向量
void expand_query_dimension_inplace() {
    Timer timer("Expanding query dimension");
    query_data.resize(128, 0.0);  // resize会在后面补0
}

// 将group数据转换为一维向量的函数
vector<double> convert_group_to_1d(const vector<vector<double>>& group_data, int elements_per_row = 128) {
    vector<double> result;
    result.reserve(group_data.size() * elements_per_row);
    
    for (const auto& row : group_data) {
        // 取每行的前elements_per_row个元素（或所有元素如果不足）
        int count = min(elements_per_row, (int)row.size());
        for (int i = 0; i < count; i++) {
            result.push_back(row[i]);
        }
        
        // 如果不足elements_per_row个元素，用0填充
        for (int i = count; i < elements_per_row; i++) {
            result.push_back(0.0);
        }
    }
    
    return result;
}

// 处理所有group数据的函数
void process_groups_to_1d() {
    Timer timer("Processing groups to 1D");

    training_data_1d = convert_group_to_1d(training_data, 128);

    // 打印转换结果的统计信息
    // cout << "\n=== 1D Conversion Results ===" << endl;
    // cout << "Training Data: " << training_data.size() << " rows -> " << training_data_1d.size() << " elements" << endl;

    // 验证前几个元素
    // cout << "\nTraining Data (first 20 elements): ";
    // for (int i = 0; i < min(128, (int)training_data_1d.size()); i++) {
    //     cout << fixed << setprecision(3) << training_data_1d[i] << " ";
    // }
    // cout << endl;
}

// 将query_data扩展重复128次的函数
vector<double> expand_query_data(int repeat_times = 128) {
    vector<double> expanded_query;
    expanded_query.reserve(query_data.size() * repeat_times);
    
    for (int i = 0; i < repeat_times; i++) {
        for (double value : query_data) {
            expanded_query.push_back(value);
        }
    }
    
    return expanded_query;
}

// 创建距离掩码函数
void create_distance_mask(vector<double>& distance_mask, int num_groups = 128, int elements_per_group = 128) {
    Timer timer("Creating distance mask");
    
    int total_length = num_groups * elements_per_group;
    distance_mask.clear();
    distance_mask.resize(total_length, 0.0);
    
    // 每32个数字的第一个设置为1
    for (int i = 0; i < num_groups; i++) {
        distance_mask[i * elements_per_group] = 1.0;
    }
    
    // // 验证前几个值
    // cout << "Distance mask (first 48 elements): ";
    // for (int i = 0; i < min(48, total_length); i++) {
    //     cout << distance_mask[i] << " ";
    //     if ((i + 1) % 16 == 0) cout << "| ";  // 每16个数字用|分隔
    // }
    // cout << endl;
}

// 可选：添加一个打印函数来验证分组
void print_group_samples() {
    cout << "\n=== Group 1 (first 2 rows) ===" << endl;
    for (int i = 0; i < min(2, (int)group1_data.size()); i++) {
        cout << "Row " << i << ": ";
        for (int j = 0; j < min(5, (int)group1_data[i].size()); j++) {
            cout << fixed << setprecision(2) << group1_data[i][j] << " ";
        }
        cout << "..." << endl;
    }
    
    cout << "\n=== Group 2 (first 2 rows) ===" << endl;
    for (int i = 0; i < min(2, (int)group2_data.size()); i++) {
        cout << "Row " << i << ": ";
        for (int j = 0; j < min(5, (int)group2_data[i].size()); j++) {
            cout << fixed << setprecision(2) << group2_data[i][j] << " ";
        }
        cout << "..." << endl;
    }
    
    cout << "\n=== Group 3 (first 2 rows) ===" << endl;
    for (int i = 0; i < min(2, (int)group3_data.size()); i++) {
        cout << "Row " << i << ": ";
        for (int j = 0; j < min(5, (int)group3_data[i].size()); j++) {
            cout << fixed << setprecision(2) << group3_data[i][j] << " ";
        }
        cout << "..." << endl;
    }
}

int main() {
    
    // 设置OpenMP线程数
    int num_threads = omp_get_max_threads();
    cout << "Using " << num_threads << " OpenMP threads" << endl;
    omp_set_num_threads(num_threads);
    
    auto total_start = chrono::high_resolution_clock::now();
    
    // read_data_json("/public1/home/m8s001097/openfhe-development/lsh/train.jsonl");
    query_data = {-4.11, -2.3, 7.02, -3.66, -6.61, 1.14, 8.72, 3.92, 1.4, -8.06};
    training_data = {
    {1.62, -6.8, -2.23, -6.67, 0.35, 4.02, -4.13, -6.04, 4.17, -7.66},
    {7.9, -1.33, 7.91, -5.39, -5.58, 6.83, -3.4, 6.75, 8.59, -5.64},
    {8.85, -3.88, 4.39, -2.52, -3.4, -6.56, -9.61, 4.99, 7.13, 0.25},
    {-6.27, 1.74, 9.87, -5.78, 7.67, -1.18, -8.24, -5.1, -4.71, 7.63},
    {-4.13, 9.16, -9.8, 0.37, -1.72, 2.98, -8.55, 3.39, -8.73, 3.36},
    {6.29, -7.14, 4.82, 0.41, -7.11, 7.53, -1.76, 2.42, 3.5, -2.46},
    {2.8, 6.59, 4.36, -2.48, -5.93, 7.78, 8.85, 6.06, -8.03, 6.34},
    {-5.93, 3.63, 9.39, -3.59, -3.34, 7.87, -1.97, -8.89, -0.73, 3.86},
    {2.09, -9.85, -9, -3.55, 0.04, -7.26, 3.07, -5.31, -5.27, 8.65},
    {7.99, -0.18, -6.79, -7.51, -0.99, -2.78, -9.89, -0.82, -6.42, -2.43},
    {-7.77, 1.64, -6.24, 5.92, -6.24, 3.9, -7.37, 7.16, 6.22, 7.89},
    {2.01, -0.65, -5.74, 5.5, -5.64, 1.82, -9.88, 5.02, -5.99, 2.91},
    {2.13, 3.56, -6.78, 2.18, 9.5, 6.53, -0.62, -7.48, 6.63, 2.87},
    {3.1, -8.6, -7.31, 0.32, -2.07, -2.02, -9.15, -2.28, -0.94, -4.29},
    {-1.8, 8.67, 8.94, 6.07, -6.78, -0.45, 5.3, 8.73, -4.52, 0.99},
    {-8.3, 2.21, 7.66, -0.28, -2.87, -6.82, 0.11, -4.38, 6.78, -5.48},
    {4.38, -1.59, -9.27, -9.77, 5.97, -9.38, -3.17, 7, 9.33, -6.28},
    {-6.26, -8.69, -5.96, 7.54, -4.65, 7.78, 8.25, 4.95, -4, -2.75},
    {-1.78, 2.14, -9.89, 9.35, -7.79, -6.34, 4.81, -7.71, 9.1, 2.08},
    {-8.99, -4.58, 8.31, -4.53, 9.33, 0.35, 1.14, -9.31, 1.71, -4.38},
    {-7.01, 9.32, -9.94, 1.16, 3.36, 0.86, -4.7, 3.94, 8.41, 3.83},
    {-4.83, -6.57, 0.2, 5.89, 1.05, -8.67, -8.69, 5.94, -7.19, -1.96},
    {1.75, -3.93, -5.06, -0.05, 4.55, 1.58, -2.02, 4.11, -8.35, 6.64},
    {4.96, -3.78, -1.7, 6.92, -0.38, 7.04, -9.73, -5.73, 2.66, 3.12},
    {8.8, -2.04, -3.59, -8.4, -1.12, 1.34, 0.87, 0.84, 6.18, -3.35},
    {5.41, 9.77, -5.71, 4.78, -0.53, -4.94, 2.66, -0.94, 1.56, -0.46},
    {-1.93, -5.34, 8.91, -2.27, 0.48, -8.72, 8.54, 5.49, -6.41, -6.92},
    {-0.37, -0.69, -3.48, 2.53, -3.67, 1.69, 2.85, -3.93, -2.77, 1.64},
    {2.51, -3.59, 8.51, -1.66, 8.51, 1.09, 2.9, -8.59, -1.49, -4.89},
    {-7.8, -3.08, 5.82, -1.96, 1.36, -7.14, 2.54, 3.77, -9.92, 7.04},
    {-5.33, -1.92, -3.53, -4.34, -3.47, 0.82, -8.34, -5.08, -1.22, -3.53},
    {7.15, -5.39, -8.81, 0.05, -2.17, 2.87, -9.34, 3.55, 3.44, -8.23},
    {-5.04, -6.51, 9.79, -2.43, -2.04, -8.53, -4.78, -5.04, -4.1, -4.08},
    {-4.56, -3.59, -9.15, 2.89, -5.15, 5.1, -3.41, -7.37, -5.07, 0.26},
    {-7.27, 0.08, 4.5, 5.75, 9.87, -1.01, -3.95, -3.36, 8.21, 6.61},
    {-9.63, 7.8, -1.56, -4.97, 0.73, 1.79, 1.13, 9.93, 2.7, 3.02},
    {9.73, -9.48, -2.51, 5.67, -3.15, -2.25, 7.5, -3.89, -5.95, 8.45},
    {2.38, -5.69, -1.89, 3.35, -3.05, -5.13, -0.85, 2.56, -9.15, 7.32},
    {-5.56, 8.86, 4.62, 8.3, 5.2, -9.3, 6.18, -0.08, -5.77, 3.41},
    {-5.16, -0.56, 7.19, 0.49, 3.64, -5.48, -1.01, 4.11, 7.79, -1.77},
    {-0.09, 8.73, 7.26, 9.98, -9.26, 7.2, 9.44, 3.07, 0.07, 3.77},
    {7.4, 8.05, -5.24, 5.94, 8, 2.74, 8.82, 9.83, 5.94, 7.08},
    {-6.53, 4.59, 4.56, 1.84, 7.62, 6.47, 3.19, 3.57, -0.41, 7.88},
    {6.08, -7.02, -9.95, 9.88, -6.3, -4.79, 0.12, 1.64, 4.13, 2.47},
    {-7.39, 7.62, 4.51, -2.59, -1.08, -9.67, -2.88, 6.44, -5.35, 2.07},
    {0.31, 7.27, -2.44, 5.51, -5.83, -2.73, -0.51, -7.79, -2.24, 5.4},
    {-6.76, 6.22, -2.85, -8.88, -8.57, 1.43, 5.52, 3.5, 8.96, -3.81},
    {5.91, 4.01, -2.73, -6.39, 3.85, -8.38, 0.68, -5.86, -3.68, -2.72},
    {-2.77, 8.66, 6.21, 0.91, 4.97, -8.1, -8.6, -9.48, 9.99, 5.47},
    {-4.54, -5.62, 0.55, 5.6, -3.5, 3.81, 4.32, -3.16, -6.54, -7.06},
    {-2.11, -0.13, -2.16, 0.96, -3.87, -5.77, -2.34, -3.72, -6.77, -3.84},
    {-4.73, 0.42, -9.48, -4.91, -3.98, -5.98, -7.07, -5.88, 4.31, 1.72},
    {-5.56, -5.4, -3.97, -8.68, -5.78, 4.82, 4.93, -9.12, -1.92, 0.99},
    {-9.39, 9.04, -1.81, 0.2, -0.17, -0.98, 5.34, 2.22, 7.97, 2.38},
    {4.74, -1.18, -7.36, 0.89, -8.4, 2.58, -2.16, -8.83, 4.25, 9.35},
    {-0.02, 3.86, -6.99, 9.64, -3.72, 3.47, -1.76, -9.6, 9.1, -1},
    {5.19, 5.75, 2.46, 4.73, -3.04, -3.72, -1.45, 4.46, -7.97, -6.1},
    {3.99, -3.55, 7.44, -5.09, -6.92, -9.07, -6.6, -1.35, 4.28, 2.84},
    {-0.73, 8.78, -0.19, 9.25, -1.31, -0.51, -5.89, 3.12, 1.35, 8.17},
    {2.63, -0.33, -6.11, 6.5, 5.72, 1.47, 5.84, 6.64, 0.82, -8.74},
    {3.59, -8.29, 7.86, 7.21, -6.68, 4.31, 8.97, -9.24, 1.41, 9.51},
    {-5.34, 1.66, 5.33, -4.74, -9.46, -8.29, -5.58, 0.94, 4.97, 9.77},
    {-4.47, -1.6, -6.41, 8.53, 8.78, -0.02, -8.57, 8.51, -8.73, -9.66},
    {-6.34, 0.44, -3.67, 9.95, 9.14, 9.75, 1.77, -5.11, 4.67, 6.02},
    {-3.13, 5.62, 6.58, -2.69, 6.42, 9.39, -3.45, -3.05, 6.11, 7.6},
    {-2.6, -7.22, -6.96, 3.07, 8.31, 9.84, -6.2, 1.12, -7.43, -0.17},
    {1.25, -9.41, -7.65, 3.33, 9.17, 7.32, 4.71, 0.17, 8.63, 6},
    {5.53, -8.7, 6.25, -0.6, 7.45, -5.58, -4.69, -9.18, -5.94, 2.93},
    {1.64, -8.49, 0.66, 0.03, -1.33, -8.72, -9.47, 1.22, 4.88, -8.56},
    {-2.31, -9.36, -9.75, 4.05, -1.95, -9.15, 3.89, -3.71, -7.54, -0.51},
    {6.19, -6.31, 8.97, -0.77, 5.05, 7.55, 2.52, -9.45, -6.63, 4.5},
    {-7.14, 5.94, 2.95, -6.7, 5.39, 9.8, 5.85, -0.05, 8.93, -8.73},
    {-2.66, 7.19, -4.21, 5.51, -5.84, -4.07, -0.06, -6.77, -6.93, -0.11},
    {5.03, -0.89, 3.61, 8.76, -0.66, 6.37, -2.34, -0.21, 1.37, -6.66},
    {0.92, 0.46, -2.44, -4.83, 8.84, -5.09, 0.14, 5.39, -7.62, -0.7},
    {-5.87, -0.5, -7.73, -9.28, 4.6, 4.02, -5.31, -6.56, 2.17, -9.78},
    {-3.8, 6.36, -0.81, 9.38, -1.08, -4.32, -6.27, -3.84, -6.54, -1.59},
    {-4.13, 6.84, 0.73, 1.5, -0.7, 3.58, -0.34, 9.05, -2.68, -0.3},
    {8.92, 5.77, 6.88, -2.09, 3.98, 3.83, 0.63, 3.03, 1.16, -0.65},
    {-3.47, 0.06, 8.63, 4.33, 3.58, 8.2, -5.93, 4.33, 7.85, 3.75},
    {-4.72, -8.26, 5.88, -6.57, 5.75, 4.48, -5.67, 1.01, 1.82, -0.11},
    {9.27, -5.48, 3.52, 8.14, 2.88, -3.19, -8.4, 5.25, -1.45, 9.76},
    {4.72, 6.15, -7.61, -2.7, 9.78, 3.66, 7.99, 5.82, -6.86, -1.13},
    {9.11, -6.1, -6.97, 1.78, -3.12, -4.83, 2.31, 1.09, 4.15, -1.89},
    {-1.77, -1.47, -0.82, 3.13, 3.62, -6.2, -0.48, -4.1, -9.33, 9.12},
    {-1.59, -9.06, -9.75, 9, -4.25, 7.4, 6.76, -6.72, -5.93, -4.5},
    {-2.67, 2.29, -4.29, -2.6, -5.27, 3.85, 7.67, -1.83, 3.36, 0.78},
    {-5.61, 7.41, 3.49, 6.89, 2.33, -9.81, 8.32, 4.36, -8.09, -5.07},
    {6.34, 4.15, 7.88, -7.03, -4.86, -4.17, -1.64, 3.5, 5.46, 3.94},
    {-1.15, 1.37, 9.12, -2.91, -7.31, -3.7, 2.12, 7.05, -3.6, 1.98},
    {-8.23, 5.49, 1.75, 1.17, 9.57, -1.54, 1.83, -1.51, -2.27, 7.33},
    {5.87, -5.26, 2.91, -7.77, -5.5, -9.2, 6.16, -9.22, 8.42, 1.01},
    {-1.99, -1.91, -0.57, -9.4, -2.98, -5.86, 7.91, 0.82, 1.79, -8.1},
    {-3.05, 0.93, -4.63, -2.85, -4.73, 5.15, 9.53, 1.64, -4.67, -8.15},
    {7.74, -4.02, 6.68, 1.65, 6.28, 5.43, 5.9, -6.32, -4.14, -0.98},
    {-1.97, -8.93, -6.81, 5.49, 9.91, -8.41, -8.32, 0.2, -1.24, 0.49},
    {-5.99, 6.03, -1.33, -4.49, 2.92, -2.92, 1.12, -7.21, 1.14, -9.33},
    {9.62, -4.98, 4.45, 9.88, 9.01, -7.72, 8.09, -6.56, -9.13, 4.44},
    {-9.42, -6.63, -6.27, -0.51, 7.02, -1.45, -1.24, 4, 2.75, 7.71},
    {-6.25, 2.96, 7.2, 3.68, 5.43, 3.12, -9.27, -0.81, -9.17, -5.03}};
        
    // { "answer": [ 6, 16, 27, 40, 47, 50, 87, 90, 93, 94 ] }

// 第1组：正常随机分布数据
    // training_data = {
    // {-0.84, -7.42, -2.45, -4.23, -3.56, -4.49, 3.41, -7.42, -7.21, -2.57},
    // {2.74, -4.01, -0.52, 2.63, -3.83, 0.63, -1.29, -0.28, 7.24, -2.72},
    // {-2.29, -4.8, 4.71, -3.49, 1.35, -3.13, 2.48, 1.52, -4.67, 6.74},
    // {2.09, 6.46, 0.35, -5.87, 6.13, 4.93, -0.71, 0.67, -3.62, -6.63},
    // {-3.55, -3.77, -1.96, -0.17, -4.36, 4.34, 1.91, 0.94, 3.42, -6.24},
    // {3.24, 1.62, -2.97, -6.35, 5.29, 2.79, -6.24, 5.52, 2.19, -5.32},
    // {-6.56, 1.53, 2.78, 5.9, 7.19, -6.12, 3.51, -4.97, 4.88, -7.42},
    // {1.91, -3.66, -5.23, 3.66, 5.13, 1.16, 6.63, 7.12, 2.85, 1.97},
    // {-6.61, 6.2, -4.02, 0.82, 2.31, -4.96, 5.23, -2.46, 5.5, -2.24},
    // {-1.75, 3.23, 0.0, -4.49, -5.44, 3.04, -4.28, 1.12, -2.01, 5.22},
    // {-1.26, 6.47, -0.15, -6.23, 4.33, 1.22, -7.42, -2.09, 0.44, 1.55},
    // {-6.43, 3.86, -3.51, -2.31, 2.58, -0.98, 1.32, 2.97, 0.23, -4.4},
    // {-3.89, 6.5, 2.15, 3.62, -6.35, -3.22, 1.36, -1.41, 1.14, -4.33},
    // {-2.87, 6.31, -7.1, -4.37, 3.38, -0.55, 0.45, -1.28, 6.37, 2.7},
    // {-1.31, 4.77, -6.55, -5.61, 1.02, -5.64, 7.42, 1.48, -3.49, -1.59},
    // {-2.77, 6.23, 4.16, -5.36, -0.59, 0.57, 0.08, -2.38, -6.03, 4.63},
    // {7.24, 5.98, -0.59, 4.11, -2.79, 6.01, -5.41, 4.48, 0.28, 0.31},
    // {3.68, 3.84, -2.92, 1.14, -7.48, 6.52, 3.23, 3.23, 4.5, 1.05},
    // {-3.48, -2.65, 0.95, -6, 6.69, -5.97, 2.05, -6.9, 1.92, -3.49},
    // {-6.53, 0.44, -1.02, -1.09, -4.03, 0.55, 0.47, -5.17, 7.61, 4.56},
    // {3.43, -4.01, 2.25, -2.42, 2.55, -0.11, -1.11, 3.15, 3.87, -1.53},
    // {4.14, 5.28, 2.68, -3.4, -4.82, 2.62, 2.19, -4.77, 4.64, -3.29},
    // {-3.47, -0.16, 1.79, 5.42, -5.42, -6.75, -2.26, -4.78, -7.24, -4.9},
    // {-7.14, 6.65, 3.89, -6.14, -4.53, -0.09, 4.58, -3.86, 4.8, 0.84},
    // {-0.26, -5.61, 4.27, -2.63, 5.58, 5.97, -4.62, -1.07, -2.95, 0.16},
    // {-3.96, -0.89, 2.76, 3.31, 3.24, -5.69, -3.46, 0.57, -3.56, -2.62},
    // {-2.57, 0.21, -3.09, 0.19, -3.25, 1.49, -0.05, -7.61, 2.21, 3.07},
    // {-6.49, 5.44, 0.64, 6.47, 2.28, -0.98, 7.1, -0.91, 4.57, 1.77},
    // {2.22, -6.87, -3.17, 2.76, 1.59, -1.38, 7.08, 5.75, -1.73, 6.3},
    // {-3.24, 2.11, 6.74, -3.8, 1.25, -0.48, -4.82, 2.06, 6.24, 0.07},
    // {-4.37, 2.77, 1.95, 3.57, -4.56, 7.17, 1.73, 5.87, 6.86, -3.54},
    // {-5.34, 7.37, -5.88, -1.32, -0.21, 1.08, -6.24, 5.72, -6.84, 1.51},
    // {1.04, 7.25, -2.22, 7.33, 3.92, 4.19, 0.45, 4.8, -3.42, 2.01},
    // {0.99, -3.44, 3.12, -1.17, -4.76, -5.15, 4.68, -1.03, -1.14, -5.61},
    // {-1.14, 6.21, 4.85, 1.23, -7.25, -3.38, -2.77, -4.63, 6.58, -6.82},
    // {5.17, -4.7, -4.54, -2.02, -0.32, -4.85, -4.61, -4.47, -1.35, 3.81},
    // {4.51, -2.99, -0.94, 2.42, -3.4, 2.73, -4.38, 3.78, 5.95, 5.77},
    // {-5.6, -0.18, -6.6, 5.34, 5.93, -4.6, -2.83, 0.15, 2.9, 6.77},
    // {4.08, 6.95, -5.31, -6.45, -1.31, -2.14, 5.47, -0.3, 7.35, 0.39},
    // {1.11, -1, -0.06, -6, -5.59, -4.8, 0.0, -0.02, -7.44, -5.06},
    // {6.78, -1.62, 0.45, 5.92, 3.71, 7.61, 3.75, -0.31, 7.54, 6.63},
    // {-7.34, 6.58, 5.65, 4.26, -4.16, 7.2, -4.96, -3.06, 2.35, 1.91},
    // {0.96, -2.54, 0.68, -0.98, -1.11, -2.27, -2.54, -2.26, -0.61, 2.64},
    // {0.38, -3.22, 5.66, -2.11, -3.74, -2.34, -3.37, 4.18, 0.19, 2.97},
    // {-3.62, 4.39, -7.26, -5.53, 1.35, 2.83, 4.83, -2.58, -6.19, 3.28},
    // {-1.02, 2.56, -3.8, -2.9, 4.9, 5.17, -1.84, 7.21, 6.06, -6.77},
    // {0.6, 5.22, 3.97, 6.65, -6.25, 6.19, 1.24, -6.75, 6.24, 5.94},
    // {-5.14, -4.74, -3.35, 4.9, -5.17, -5.07, -0.77, -3.94, 7.16, -0.55},
    // {5.32, -6.05, -3.34, -1.57, 7.38, -2.76, -2.99, -7.19, 7.51, 7.41},
    // {2.38, 3.36, 5.5, -3.36, 6.37, -2.37, -2.77, 7.64, 5.39, -4.78},
    // {-1.7, 4.64, -2.98, -0.08, 1.75, -6.33, 3.63, 3.05, 6.83, 0.54},
    // {-0.34, -2.92, -3.01, -2.08, 1.26, -0.68, 4.2, -4.76, -1.34, -5.67},
    // {0.63, 1.35, 5.21, -6.74, -1.51, -2.59, -5.23, -3.55, -7.48, -3.77},
    // {1.59, -3.05, 4.02, 4.97, 1.74, -6.03, -2.25, -1.97, 2.97, 1.5},
    // {7.4, 6.83, 7.33, 5.75, -3.32, 6.34, -0.61, -5.89, 4.9, -5.32},
    // {5.51, -5.91, -1.99, 6.7, -4.45, 0.44, 4.03, 0.38, -6.93, 3.88},
    // {-0.36, -2.43, -2.67, -0.28, 4.97, 5.99, 6.96, 6.42, 5.72, -2.77},
    // {-7.02, 2.9, 7.36, 1.58, 3.83, -2.02, -7.28, -0.35, 5.93, 3.37},
    // {-3.3, 7.07, -5.97, 1.35, -7.52, 1.63, 4.68, -0.93, 1.98, -2.18},
    // {2.64, 1.45, 2.36, -5.69, 6.38, -5.87, -4.31, -7.37, -5.21, -2.1},
    // {-2.92, -4.59, 7.26, -4.44, 2.36, -0.35, -5.58, 6.71, -3.36, 0.04},
    // {-0.39, 4.64, 3.5, 2.63, -0.54, -4.11, 6.87, 2.71, -1.14, 3.48},
    // {5.5, 3.48, -1.23, -1.06, 0.87, -0.89, 4.64, -2.64, -4.41, -1.57},
    // {-0.67, -5.42, 1.93, -2.11, 2.44, 6.24, -0.64, -5, 2.47, -5.14},
    // {-6.11, -3.02, 6.02, 5.46, -3.91, -6.59, 5.54, 6.2, -6.1, 0.53},
    // {3.14, -1.4, -3.27, -6.75, -1.4, 0.53, -1.82, 0.25, 3.02, -6.29},
    // {-5.34, -4.7, 1.54, 3.44, -1, -2.54, 2.45, 5.18, 3.07, -1.96},
    // {4.99, -5.75, -3.45, 4.76, -7.4, 4.35, -4.4, 4.48, -2.71, -0.87},
    // {5.73, -3.04, 6.42, 2.69, -5.52, -6.68, 1.75, -3.8, -3.25, -6.03},
    // {-6.77, -7.5, 1.01, 7.17, 2.2, -1.29, -1.36, 1.68, -6.64, 4.45},
    // {-2.68, 6.65, 0.5, -4.54, -0.85, -6.9, 2.47, -7.58, 3.92, -5.81},
    // {-7.11, -6.52, 7.49, 6.89, -1.28, 2.95, -5.01, -4.59, 2.2, -5.92},
    // {5.23, -3.68, -4.73, 3.99, 6.93, 4.88, -1.94, -5.38, -1.22, -6.22},
    // {-3.73, -1.43, -2.47, 2.97, -4.64, 0.38, 5.8, -4.5, -6.56, -4.1},
    // {5.37, -1.64, -5.14, 0.79, 6.19, -6.22, 3.37, -7.21, -0.96, 4.22},
    // {-4.95, 1.7, -5.55, 4.05, -7.11, -4.35, -4.37, -5.79, -1.04, 6.68},
    // {-3.22, -4.58, -2.2, 6.92, 6.69, 5.8, 0.53, -6.65, 6.58, -0.82},
    // {7.54, 6.47, -6.05, -5.47, -3.43, 6.51, 6.51, -1.48, -2.57, 4.05},
    // {3.38, 3.55, -6.51, 2.29, 0.75, -3.53, 1.58, -4.65, 4.08, 7.61},
    // {-6.26, 7.4, -3.78, 2.29, -2.44, 4.31, -3.21, -3.86, -7.58, -1.1},
    // {-5.73, -2.51, -0.3, -1.68, -4.71, 5.54, -0.65, 7.46, 7.53, 3.74},
    // {-5.4, -3.22, 2.58, -6.42, -5.1, 2.23, -4.52, -7.04, -6.2, 6.66},
    // {-2.62, -1.1, 3, -0.8, -6.65, 6.06, 4.79, -1.19, 6.97, 5.28},
    // {6.33, -3.15, 6.97, 7.05, -2.73, 1.03, 7.31, -0.66, -6.23, -1.8},
    // {-5.84, 6.83, 1.35, 3.39, 0.77, -7.42, 2.82, -2.77, -6.45, -1.17},
    // {2.54, -4.68, -2.23, -7.45, 4.27, 5.98, 4.16, -3.78, -0.65, -2.06},
    // {-7.21, -0.55, -4.52, 0.38, -2.61, 3.16, -5.25, -0.46, -3.17, -2.4},
    // {-3, -1.91, 0.0, -3.89, -1.95, -7.03, 3.23, 3.03, -1.74, -5.78},
    // {4.18, 6.88, 5.94, -7.44, -5.31, -1.01, 5.1, -1.41, -5.05, 2.33},
    // {-5.62, 0.22, 5.88, 3.73, 5.86, 6.85, 2.43, 2.99, -3.66, -3.14},
    // {-2.02, -4.02, -6.64, -2.85, -3.15, -1.68, 6.89, 5.3, 2.81, 3.04},
    // {-2.8, -2.05, 7.2, -5.86, 5.33, -4.78, 2.5, 0.82, 3.98, -1.89},
    // {6.02, -5.95, 2.58, -3.23, 2.33, 7.01, -5.31, 4.61, 2.5, 6.17},
    // {7.29, -4.59, 6.96, 1.47, 7.38, 3.51, -6.54, -1.03, 2.16, 4.95},
    // {7.05, -6.05, -3.54, 7.44, 0.57, 4.9, 6.54, -2.18, 6.09, -4.58},
    // {7.33, 6.41, -4.28, 4.94, -3.05, -1.45, -3, -0.69, -5.04, 5.12},
    // {4.6, 6.59, 5.17, 3.92, -5.96, 3.48, 3.63, -5.84, 6.42, -5.17},
    // {-1.92, 5.08, -0.86, -3.14, 5.82, 7.64, -3.12, -0.24, -3.82, 4.47},
    // {-6.78, 1.66, -4.47, -7.4, -0.11, 6.89, 4.23, -2.76, -0.84, 3.96},
    // {0.06, -6.11, -1.85, -0.54, -2.47, -6.87, 1.79, 1.11, -4.71, -1.85}
    // };
    
    //  { "answer": [34, 5, 88, 67, 31, 13, 92, 24, 52, 74] }

// 第2组：包含接近query的数据点
// training_data = {
// {-3.71, -2.42, 6.79, -3.87, -6.43, 1.37, 8.42, 4.11, 1.36, -8.42},
// {8.01, -6.49, -8.18, -7.78, -3.27, 4.21, -2.1, 6.01, 2.25, -2.17},
// {-4.44, -2.67, 7.21, -3.43, -5.91, 0.84, 8.17, 3.63, 1.05, -8.71},
// {1.93, -9.25, 4.23, -8.66, 8.94, 6.49, -2.49, -8.29, -4.16, -8.44},
// {-3.89, -1.77, 6.54, -3.23, -6.79, 1.6, 8.09, 3.41, 1.75, -7.17},
// {-9.11, -7.19, -5.81, 9.15, 4.31, -3.19, 5.64, -2.6, 5.04, 3.13},
// {-4.31, -3.22, 7.65, -3.89, -6.23, 0.77, 8.94, 4.65, 1.02, -7.47},
// {7.21, -9.09, -0.56, 8.47, -6.04, -8.57, -2.59, -6.14, -4.52, 3.07},
// {-4.68, -1.48, 7.55, -3.38, -7.23, 1.77, 8.49, 3.6, 1.99, -8.74},
// {6.26, -1.38, 3.48, -2.49, -5.84, -6.59, -7.21, 2.21, -3.02, 2.33},
// {-4.57, -2.8, 6.19, -3.16, -6.89, 0.76, 8.42, 3.95, 0.54, -7.88},
// {-7.21, 2.36, -6.64, -2.15, -8.36, 2.09, 4.94, -4.21, -3.23, -9.59},
// {-4.42, -1.59, 6.36, -4.22, -6.85, 1.07, 8.58, 4.39, 1.21, -8.26},
// {-8.69, -0.73, 2.02, 3.76, 8.47, -6.47, -3.72, -2.15, 7.55, -1.32},
// {-4.01, -2.95, 6.69, -3.64, -6.11, 0.53, 8.14, 3.29, 0.97, -7.62},
// {1.02, 9.21, 8.61, -9.7, 0.1, -8.48, -4.55, -1.59, 3.27, -6.02},
// {-3.94, -1.66, 6.45, -3.2, -6.02, 1.58, 9.45, 4.12, 2.1, -7.72},
// {4.75, 6.15, -3.23, 9.11, -4.93, 9.7, 0.09, -7.45, 4.2, 8.11},
// {-3.38, -2.09, 7.58, -3.03, -6.48, 2.14, 9.07, 3.63, 1.76, -8.46},
// {5.54, -0.27, -6.87, 8.02, 6.25, 5.12, -6.89, -7.49, -1.52, -6.89},
// {-9.51, 5.63, -2.51, -9.82, 9.33, -4.32, -4.69, 9.89, 1.45, 7.38},
// {6.61, -0.25, 5.84, -3.4, 9.44, 2.38, -8.59, 1.12, -6.45, -5.84},
// {-8.12, -1.8, 8.61, 7.68, 8.24, -1.29, 9.84, -8.26, -5.42, 2.07},
// {-0.53, 5.23, -6.76, 7.51, -5.45, -1.13, 0.4, 6.07, -1.49, 4.59},
// {-9.89, -8.29, -5.39, -2.69, -5.25, 8.21, -2.23, -6.58, -5.51, -0.65},
// {8.01, -9.95, 8.85, -0.84, 2.76, -6.42, 0.53, -3.48, -1.26, -2.17},
// {-6.02, 6.25, -5.87, -0.29, -4.48, 9.63, -4.93, 6.31, -5.64, -2.77},
// {3.22, -3.37, -7.42, 7.26, -8.79, 0.96, -1.24, -9.74, 8.9, -9.48},
// {3.69, 6.55, 9.59, 7.76, -7.18, -7.51, 1.59, -2.8, -5.24, -5.66},
// {-9.16, -0.72, -8.12, 1.11, -9.84, -9.4, 6.73, 6.33, -9.93, -5.91},
// {-6.87, -1.85, 9.59, -2.8, -7.83, -8.63, 9.12, 3.45, -1.67, 5.31},
// {-8.01, -6.9, -8.32, 5.95, -9.24, -8.24, -3.23, -8.82, 4.51, -4.76},
// {-9.49, -4.59, 5.07, 6.15, -2.32, -5.42, 3.53, -8.5, 0.77, -6.68},
// {0.06, 2.66, -9.78, -4.59, 9.59, -5.36, -8.35, -5.52, -0.42, -6.12},
// {3.89, -9.59, -5.82, -7.87, 9.24, -7.15, 6.34, -6.14, 2.52, 0.9},
// {-9.31, 8.59, -2.18, 1.24, 9.87, -7.49, -6.78, 1.48, 9.61, -0.91},
// {7.52, -0.23, -2.09, 2.87, -1.54, 9.73, -5.45, 4.19, -0.59, -5.43},
// {5.48, 3.16, 9.81, -6.76, -1.93, 7.04, 9.21, -5.61, 0.25, -5.48},
// {-0.77, 5.32, -4.73, -6.49, -9.71, 9.84, -7.22, -9.03, -5.22, 7.02},
// {-8.47, -2.38, 7.25, -1.84, -3.4, 7.48, 4.82, -7.48, 1.93, 8.02},
// {0.38, 2.47, 9.23, 4.8, 6.61, 1.01, -2.84, -2.55, 5.29, -1.55},
// {6.89, -2.33, -3.29, 0.3, -7.48, -8.5, -2.58, -4.73, 5.51, -0.54},
// {5.56, 5.89, 5.48, 5.36, -2.14, -0.26, -1.07, 0.07, -6.52, 7.46},
// {-9.34, 9.59, 4.83, -0.23, -8.88, 0.32, 6.02, -8.34, 2.25, -8.13},
// {-5.69, -2.62, -7.68, 0.76, -8.5, -7.6, 0.79, -9.31, 4.07, -8.02},
// {7.64, 9.7, 5.43, 2.25, 2.46, -8.11, -1.52, -9.52, -9.36, 4.69},
// {-7.87, -9.6, 0.38, -2.2, -4.62, 3.24, 0.32, -8.66, -0.26, 3.44},
// {-6.59, 5.18, 0.65, -9.66, 5.61, 9.13, 5.86, -9.88, 5.35, -4.8},
// {7.29, -5.11, -0.04, -9.34, -4.02, 6.59, 7.29, -7.04, -9.68, -5.04},
// {-9.52, 2.48, 2.36, -6.69, 1.89, -5.48, 7.84, -9.76, -8.52, -8.04},
// {-0.78, -1.66, -6.31, 2.51, -2.36, 0.38, -1.35, -0.07, -2.32, 0.04},
// {9.48, 9.73, -5.84, 6.45, -6.85, 6.61, -5.01, 5.48, 5.09, 2.29},
// {2.87, 9.48, -9.09, -4.22, -0.05, 5.15, 7.49, 2.09, -7.48, -9.01},
// {9.9, 1.69, -9.76, 3.5, 2.58, -9.78, 7.01, -1.4, 8.62, 8.28},
// {-8.66, 4.78, 0.07, 9.48, -6.48, -6.63, -4.55, 5.83, 0.07, -9.66},
// {2.86, -1.78, -9.95, -8.85, 1.43, 5.23, 6.45, -9.48, -4.16, 6.38},
// {6.45, 5.48, -8.62, 5.83, 6.31, -9.69, 6.48, -9.89, -1.05, -0.96},
// {1.23, -2.47, -5.77, -8.89, -5.93, 2.86, 5.91, 1.69, 8.81, 6.96},
// {-9.66, 2.86, -5.22, 4.2, 6.43, 4.36, -6.25, 6.59, -1.87, -8.95},
// {-7.42, 8.66, -2.58, 0.23, 4.16, -1.32, -7.51, -9.79, 6.29, -0.91},
// {1.77, 5.1, 7.39, 1.59, -1.84, -2.49, -2.62, -0.3, 0.73, 4.13},
// {2.59, 7.68, -6.73, -9.69, -5.03, -7.42, -6.59, -4.13, -7.01, -4.02},
// {-4.07, 1.12, -2.86, -4.58, -8.2, 1.69, -7.94, -7.84, -9.11, -1.43},
// {6.52, -6.52, 3.02, 2.36, -2.15, 9.41, -6.34, 0.53, -0.62, -1.49},
// {-8.34, 3.03, -9.21, -2.12, 5.38, -5.77, 1.62, -6.66, 6.75, -9.95},
// {-2.75, -6.18, 2.74, -2.07, 4.19, 9.88, -0.23, -4.4, -5.87, -5.45},
// {8.04, 5.51, -6.45, -1.01, -6.37, 7.88, -5.41, -4.76, -4.95, 9.66},
// {3.29, -2.52, 0.42, -6.5, -0.3, 6.48, 0.78, 1.54, -2.74, 2.47},
// {8.21, 4.36, -9.02, 1.69, -7.45, -7.94, 0.96, 7.42, -9.6, -1.96},
// {-7.29, -5.55, 0.8, 0.02, 4.16, -4.13, -9.7, -0.65, -0.89, 3.22},
// {-8.19, -6.73, -7.42, -4.87, 8.9, 2.74, -1.05, 7.48, -2.92, 8.57},
// {4.36, -5.45, -7.11, -2.09, 5.42, 8.31, -9.88, 0.42, -9.95, -2.71},
// {0.45, 7.31, -8.91, 9.05, -2.77, -9.24, -5.25, 9.7, -0.5, 2.36},
// {-1.89, 9.98, 6.21, -9.44, 0.45, -4.0, -7.06, 8.88, -8.79, -7.94},
// {8.48, 5.18, -7.74, 4.84, 8.66, -9.01, -7.22, 9.16, 2.36, -8.02},
// {-1.67, -9.82, -0.96, 0.65, 8.66, 8.47, -4.22, 5.87, 3.44, -8.04},
// {3.8, 9.92, 4.16, 7.48, -6.89, 2.51, -9.73, 9.54, -9.6, 8.8},
// {-5.09, 9.8, 6.73, -5.18, -6.37, 5.51, 0.13, 0.69, -2.33, -6.02},
// {2.21, 2.29, -8.85, -8.44, -5.26, 3.1, -0.09, 7.12, 8.81, 3.29},
// {1.12, -5.84, -9.31, -1.12, -2.36, 7.61, -0.42, -1.35, -5.48, 9.98},
// {1.54, -8.15, 6.33, 7.68, 6.7, -8.04, 0.87, 5.29, -3.75, 2.93},
// {4.48, 7.31, -1.36, 7.95, 7.42, -7.51, -2.49, 6.36, -9.44, -4.64},
// {-5.65, 0.1, 7.4, -1.24, -5.18, 4.36, -2.62, -3.95, -5.48, 0.38},
// {8.24, -1.44, -6.95, 2.63, -2.44, 1.24, -4.58, -3.35, 1.21, -8.21},
// {6.48, -7.96, -2.49, -2.23, 8.13, -8.15, 5.22, 6.66, -8.88, -9.24},
// {-3.37, 5.48, 7.48, -2.38, -2.55, 8.85, -2.87, 7.25, 5.25, 1.6},
// {2.06, 1.82, -1.78, -4.95, 6.21, -8.24, 2.36, 9.14, 0.73, -8.15},
// {-7.04, 7.51, -8.75, 6.55, -1.15, 6.66, -9.16, -4.05, 1.85, -0.5},
// {1.52, 1.24, -3.13, 4.52, -5.48, -6.95, -1.38, 9.33, 2.07, 5.15},
// {8.48, 5.22, -4.84, -0.77, 9.14, 9.66, 4.84, -5.42, -8.02, 6.75},
// {5.93, 1.49, -9.66, -1.89, -0.76, -2.21, 8.02, 9.24, -9.28, 3.33},
// {1.39, 7.74, -5.52, -4.48, -8.92, -5.2, -9.73, 8.69, -2.21, -9.83},
// {-6.45, 6.48, -6.29, 4.38, -7.87, -5.42, 5.86, 7.79, -6.7, 3.7},
// {7.15, 1.47, 0.89, -7.15, 8.73, 6.8, -7.84, -8.47, 2.89, -0.3},
// {8.81, 4.16, -9.93, 9.66, 9.24, 4.07, 5.22, -5.48, 7.31, 0.22},
// {1.17, -9.48, -7.15, 9.76, 9.76, 5.8, -5.55, 9.7, 4.2, -6.37},
// {-4.19, 9.38, 5.48, 9.05, 9.95, -2.25, 0.26, 5.29, -8.26, 5.25},
// {-6.29, -6.73, -5.06, -8.02, 0.52, 8.92, -6.14, -1.82, 9.05, -7.29},
// {7.84, -5.1, -1.21, 8.34, 9.44, -1.12, -2.62, -3.13, -6.04, 5.07},
// {-7.11, 5.96, 1.87, -5.32, 4.7, -7.81, 9.16, -8.78, 9.66, -0.13},
// {-2.97, 9.8, 3.9, 0.16, 5.54, 9.16, -3.85, -1.93, -7.49, 1.77}
// };

// { "answer": [ 1, 3, 5, 7, 9, 11, 13, 15, 17, 19 ] }

// 第3组：包含4极值的数据
// training_data = {
// {10.0, -9.99, -5.15, -6.74, -2.48, -6.9, 10.0, -9.85, -9.18, -10.0},
// {3.19, -5.56, -9.99, -10.0, -10.0, 9.99, -1.49, 10.0, 8.01, 9.99},
// {10.0, -10.0, 4.7, -4.01, 1.64, 10.0, 2.73, 1.78, -5.23, 10.0},
// {2.36, 7.23, -10.0, -6.69, 6.89, -10.0, -0.8, 0.76, -4.11, -10.0},
// {-10.0, -4.29, -2.21, -0.2, -4.95, 10.0, 2.16, 1.06, 10.0, -7.08},
// {10.0, 1.82, -10.0, -7.24, 10.0, 3.14, -7.08, -10.0, 2.46, -6.03},
// {-7.46, 1.73, 3.12, 10.0, 8.07, -6.94, -9.99, -5.63, 5.47, -10.0},
// {2.16, -4.16, -5.97, 4.17, 5.78, 10.0, 7.49, 8.14, 10.0, 2.22},
// {-7.47, 10.0, -4.56, 0.93, 2.61, -5.65, 5.94, -2.82, 6.16, -2.57},
// {-2.01, 3.65, 0.01, -5.11, -6.18, 3.43, -10.0, 1.26, -2.31, -9.99},
// {-1.45, 7.36, -9.99, -7.08, 4.88, 1.37, -10.0, -2.4, 0.5, -10.0},
// {-7.29, 4.34, -3.99, -2.66, 10.0, -9.99, 1.47, -10.0, 0.26, 9.99},
// {-4.42, 10.0, 10.0, 4.11, -7.24, -3.68, 1.53, -1.62, 1.29, 10.0},
// {-3.29, 10.0, -8.11, -5.0, 10.0, -0.63, 0.51, -1.47, 10.0, 10.0},
// {-1.51, 5.41, -10.0, -6.39, 1.16, -6.42, 10.0, 1.68, -4.01, -10.0},
// {-3.17, 7.06, 4.66, -6.1, -0.68, 0.65, 0.09, -2.73, -6.81, 5.23},
// {8.49, 6.76, -0.68, 4.66, -3.22, 6.85, -6.17, 5.1, 0.32, 0.35},
// {4.21, 4.34, -3.33, 1.29, -8.52, 7.39, 3.65, 3.65, 5.12, 1.19},
// {-3.97, -3.03, 1.08, -6.83, 7.62, -6.8, 2.34, -7.85, 2.19, -9.99},
// {10.0, 0.5, -1.17, -1.25, -4.61, 0.63, 0.54, -5.89, 8.67, 5.2},
// {3.9, -4.56, 2.57, -2.77, 2.91, -0.13, -9.99, 3.59, 4.41, -1.76},
// {10.0, 6.02, 3.07, -3.88, 10.0, 2.99, 2.5, -10.0, 5.29, -3.77},
// {-3.96, -0.19, 2.04, 10.0, -6.18, -7.7, -2.59, -5.45, -10.0, -9.99},
// {-8.14, 9.99, 4.43, -7, -5.18, -0.11, 5.22, -4.41, 10.0, 0.96},
// {-0.3, -6.39, 4.85, -3.0, 6.37, -10.0, -5.27, -1.23, -3.37, 0.18},
// {-4.52, -1.02, 10.0, 3.77, 3.69, -6.51, -3.95, 0.65, -4.06, -10.0},
// {-2.93, 0.24, -3.52, 0.21, -3.7, 10.0, -0.06, -8.66, 2.52, 10.0},
// {-7.38, 10.0, 0.73, 10.0, 2.6, -1.13, 8.09, -1.05, 5.2, 10.0},
// {10.0, -7.82, -3.6, 10.0, 1.81, -1.59, 8.07, 9.99, -1.99, 10.0},
// {-3.71, 2.41, 7.68, -4.35, 1.43, -0.56, -5.5, 2.35, 7.1, 0.08},
// {-4.98, 3.15, 2.22, 4.08, -5.2, 8.16, 1.97, 6.68, 7.84, -4.05},
// {-6.09, 8.41, -6.7, -1.52, -0.25, 1.22, -7.08, 6.51, -7.81, 1.72},
// {1.19, 8.25, -2.55, 8.35, 4.47, 4.77, 0.51, 5.47, -3.91, 2.29},
// {1.13, -3.92, 3.55, -1.34, -5.44, -5.87, 5.33, -1.19, -1.31, -6.39},
// {-1.31, 7.06, 5.52, 1.41, -8.27, -3.87, -3.17, -5.28, 7.5, -7.78},
// {5.89, -5.36, -5.18, -2.32, -0.37, -5.53, -5.27, -5.1, -1.56, 4.34},
// {5.13, -3.43, -1.08, 2.76, -3.88, 3.11, -5.0, 4.31, 6.79, 6.59},
// {-6.39, -0.21, -7.53, 6.08, 6.76, -5.26, -3.24, 0.16, 3.31, 7.73},
// {4.65, 7.93, -6.06, -7.35, -1.51, -2.46, 6.24, -0.35, 8.37, 0.44},
// {1.26, -1.15, -0.08, -6.85, -6.37, -5.48, -0.01, -0.03, -8.48, -5.77},
// {7.73, -1.86, 0.51, 6.76, 4.23, 8.68, 4.28, -0.36, 8.59, 7.57},
// {-8.37, 7.5, 6.45, 4.86, -4.75, 8.2, -5.66, -3.49, 2.68, 2.18},
// {1.09, -2.91, 0.77, -1.13, -1.28, -2.61, -2.91, -2.59, -0.71, 3.02},
// {0.43, -3.68, 6.46, -2.42, -4.27, -2.68, -3.85, 4.77, 0.21, 3.4},
// {-4.13, 5.01, -8.28, -6.3, 1.53, 3.23, 5.51, -2.95, -7.06, 3.74},
// {-1.17, 2.92, -4.34, -3.31, 5.59, 5.9, -2.11, 8.22, 6.91, -7.71},
// {0.68, 5.95, 4.52, 7.59, -7.13, 7.05, 1.41, -7.7, 7.11, 6.77},
// {-5.86, -5.41, -3.82, 5.58, -5.89, -5.78, -0.89, -4.49, 8.16, -0.64},
// {6.07, -6.89, -3.82, -1.8, 8.42, -3.16, -3.42, -8.19, 8.56, 8.45},
// {2.72, 3.83, 6.28, -3.84, 7.26, -2.71, -3.17, 8.71, 6.14, -5.46},
// {-1.95, 5.29, -3.41, -0.1, 2.0, -7.21, 4.14, 3.48, 7.79, 0.61},
// {-0.4, -3.34, -3.45, -2.4, 1.43, -0.79, 4.79, -5.43, -1.54, -6.46},
// {0.71, 1.53, 5.95, -7.69, -1.73, -2.96, -5.97, -4.06, -8.53, -4.31},
// {1.81, -3.49, 4.59, 5.67, 1.98, -6.88, -2.58, -2.26, 3.39, 1.71},
// {8.44, 7.78, 8.36, 6.56, -3.8, 7.23, -0.7, -6.71, 5.59, -6.07},
// {6.28, -6.74, -2.28, 7.65, -5.08, 0.5, 4.6, 0.43, -7.9, 4.42},
// {-0.42, -2.78, -3.06, -0.33, 5.67, 6.83, 7.94, 7.31, 6.53, -3.17},
// {-7.99, 3.3, 8.39, 1.8, 4.37, -2.32, -8.3, -0.41, 6.76, 3.83},
// {-3.77, 8.06, -6.81, 1.54, -8.57, 1.86, 5.34, -1.07, 2.26, -2.5},
// {3.02, 1.65, 2.69, -6.49, 7.28, -6.68, -4.92, -8.4, -5.94, -2.41},
// {-3.34, -5.24, 8.29, -5.06, 2.69, -0.41, -6.36, 7.64, -3.84, 0.04},
// {-0.46, 5.29, 3.99, 3.0, -0.63, -4.69, 7.84, 3.09, -1.31, 3.97},
// {6.28, 3.97, -1.41, -1.22, 0.99, -1.02, 5.29, -3.03, -5.03, -1.8},
// {-0.77, -6.18, 2.21, -2.41, 2.78, 7.11, -0.74, -5.7, 2.82, -5.86},
// {-6.97, -3.45, 6.86, 6.22, -4.46, -7.51, 6.31, 7.06, -6.96, 0.61},
// {3.58, -1.61, -3.73, -7.69, -1.61, 0.6, -2.09, 0.28, 3.44, -7.17},
// {-6.09, -5.36, 1.76, 3.92, -1.15, -2.9, 2.79, 5.9, 3.5, -2.25},
// {5.68, -6.55, -3.94, 5.42, -8.44, 4.96, -5.02, 5.1, -3.1, -1.0},
// {6.53, -3.47, 7.32, 3.07, -6.3, -7.62, 2.0, -4.34, -3.71, -6.88},
// {-7.72, -8.55, 1.15, 8.16, 2.51, -1.48, -1.56, 1.91, -7.57, 5.07},
// {-3.07, 7.58, 0.57, -5.18, -0.98, -7.86, 2.82, -8.64, 4.47, -6.62},
// {-8.11, -7.44, 8.54, 7.85, -1.47, 3.36, -5.71, -5.24, 2.51, -6.74},
// {5.96, -4.2, -5.39, 4.54, 7.9, 5.57, -2.22, -6.13, -1.4, -7.09},
// {-4.26, -1.64, -2.83, 3.39, -5.3, 0.43, 6.61, -5.12, -7.48, -4.68},
// {6.13, -1.89, -5.86, 0.9, 7.05, -7.09, 3.84, -8.22, -1.1, 4.82},
// {-5.64, 1.94, -6.33, 4.61, -8.11, -4.96, -4.98, -6.6, -1.2, 7.61},
// {-3.68, -5.23, -2.52, 7.9, 7.63, 6.62, 0.6, -7.58, 7.51, -0.95},
// {8.61, 7.37, -6.9, -6.24, -3.92, 7.43, 7.43, -1.7, -2.93, 4.62},
// {3.86, 4.05, -7.43, 2.61, 0.86, -4.03, 1.8, -5.3, 4.65, 8.68},
// {-7.13, 8.43, -4.31, 2.61, -2.79, 4.92, -3.67, -4.41, -8.64, -1.26},
// {-6.53, -2.88, -0.35, -1.93, -5.37, 6.31, -0.75, 8.5, 8.58, 4.27},
// {-6.16, -3.68, 2.94, -7.32, -5.82, 2.54, -5.16, -8.02, -7.07, 7.58},
// {-3.0, -1.26, 3.42, -0.92, -7.58, 6.89, 5.46, -1.37, 7.94, 6.02},
// {7.21, -3.6, 7.95, 8.03, -3.12, 1.17, 8.33, -0.76, -7.09, -2.08},
// {-6.66, 7.78, 1.54, 3.87, 0.88, -8.46, 3.21, -3.17, -7.36, -1.34},
// {2.9, -5.34, -2.55, -8.49, 4.88, 6.82, 4.75, -4.31, -0.75, -2.36},
// {-8.22, -0.64, -5.17, 0.43, -2.98, 3.6, -5.98, -0.53, -3.62, -2.75},
// {-3.43, -2.19, -0.01, -4.43, -2.23, -8.01, 3.68, 3.45, -1.99, -6.6},
// {4.76, 7.85, 6.77, -8.47, -6.05, -1.16, 5.81, -1.62, -5.76, 2.65},
// {-6.41, 0.25, 6.71, 4.26, 6.68, 7.81, 2.77, 3.45, -4.18, -3.58},
// {-2.31, -4.59, -9.95, -3.25, -3.59, -1.93, 7.85, 6.04, 3.2, 3.46},
// {-3.2, -2.35, 8.2, -6.68, 6.07, -5.46, 2.85, 0.94, 4.54, -2.17},
// {6.86, -6.79, 2.94, -3.69, 2.65, 7.98, -6.05, 5.25, 2.85, 7.05},
// {8.31, -5.24, 7.94, 1.68, 8.42, 4.01, -7.47, -1.18, 2.46, 5.65},
// {8.03, -6.89, -4.05, 8.47, 0.65, 5.58, 7.46, -2.5, 6.94, -5.23},
// {8.35, 7.3, -4.88, 5.63, -3.48, -1.66, -3.43, -0.8, -5.75, 5.84},
// {5.25, 7.51, 5.89, 4.47, -6.8, 3.97, 4.14, -6.66, 7.31, -5.9},
// {-2.2, 5.8, -0.99, -3.58, 6.63, 8.71, -3.56, -0.28, -4.36, 5.09},
// {-7.73, 1.89, -5.09, -8.43, -0.13, 7.85, 4.82, -3.17, -0.97, 4.52},
// {0.07, -6.97, -2.12, -0.63, -2.83, -7.83, 2.04, 1.26, -5.37, -2.12}
// };

//  { "answer": [34, 88, 67, 31, 92, 52, 74, 40, 44, 83] }--对了9个，第10和11弄错了

// 第4组：包含零值和重复数据
// training_data = {
// {-1.14, -5.06, -1.09, 2.48, -1.73, -1.34, 0.0, -2.71, 0.0, -1.66},
// {2.07, -1.73, 0.26, 0.0, 0.0, 0.53, -0.9, -0.21, 0.0, -1.02},
// {0.0, -1.77, 3.16, -1.43, 0.91, -1.23, 1.66, 0.0, 0.0, 4.55},
// {1.4, 4.35, 0.23, -3.94, 4.12, 0.0, -0.48, 0.0, 0.0, -4.45},
// {0.0, -2.53, -1.32, -0.12, 0.0, 2.92, 0.0, 0.63, 2.3, -4.18},
// {2.18, 1.09, -1.99, -4.26, 3.55, 0.0, -4.18, 3.7, 1.47, 0.0},
// {0.0, 1.03, 1.86, 3.96, 4.83, -4.11, 2.35, -3.34, 0.0, 0.0},
// {1.28, -2.46, 0.0, 2.46, 3.44, 0.78, 4.47, 0.0, 0.0, 1.32},
// {-4.44, 0.0, -2.7, 0.55, 1.55, -3.33, 3.51, -1.65, 0.0, 0.0},
// {-1.18, 0.0, -0.03, 0.0, -3.65, 2.04, -2.88, 0.0, -1.35, 3.64},
// {-1.14, -5.06, -1.09, 2.48, -1.73, -1.34, 0.0, -2.71, 0.0, -1.66},
// {2.07, -1.73, 0.26, 0.0, 0.0, 0.53, -0.9, -0.21, 0.0, -1.02},
// {0.0, -1.77, 3.16, -1.43, 0.91, -1.23, 1.66, 0.0, 0.0, 4.55},
// {1.4, 4.35, 0.23, -3.94, 4.12, 0.0, -0.48, 0.0, 0.0, -4.45},
// {0.0, -2.53, -1.32, -0.12, 0.0, 2.92, 0.0, 0.63, 2.3, -4.18},
// {2.18, 1.09, -1.99, -4.26, 3.55, 0.0, -4.18, 3.7, 1.47, 0.0},
// {0.0, 1.03, 1.86, 3.96, 4.83, -4.11, 2.35, -3.34, 0.0, 0.0},
// {1.28, -2.46, 0.0, 2.46, 3.44, 0.78, 4.47, 0.0, 0.0, 1.32},
// {-4.44, 0.0, -2.7, 0.55, 1.55, -3.33, 3.51, -1.65, 0.0, 0.0},
// {-1.18, 0.0, -0.03, 0.0, -3.65, 2.04, -2.88, 0.0, -1.35, 3.64},
// {-0.84, 0.82, -0.22, -0.73, -2.31, 1.04, -2.74, 0.0, 0.0, 1.7},
// {2.9, 0.0, 1.18, 0.0, -1.89, 0.45, 0.08, -1.59, -3.83, 3.04},
// {1.02, 0.0, 0.0, 0.0, 0.0, 1.55, -1.51, -4.07, -4.86, -3.29},
// {0.0, 0.0, 0.0, 0.0, -3.0, -0.06, 3.36, -2.59, 3.56, 0.57},
// {0.0, -3.77, 0.0, 0.0, 4.9, 4.84, -3.1, -0.72, -1.98, 0.1},
// {-2.66, -0.6, 0.0, 2.21, 2.18, -3.83, -2.33, 0.38, -2.39, 0.0},
// {-1.73, 0.14, -2.07, 0.12, -2.18, 0.0, -0.03, -5.11, 0.0, 0.0},
// {0.0, 0.0, 0.43, 4.34, 1.53, -0.66, 4.77, 0.0, 0.0, 1.19},
// {1.49, -4.61, -2.13, 1.85, 1.07, 0.0, 4.76, 3.86, -1.16, 0.0},
// {-2.18, 1.41, 4.53, -2.55, 0.84, -0.33, -3.23, 1.38, 4.19, 0.0},
// {-2.93, 1.86, 0.0, 2.4, -3.06, 4.82, 1.16, 3.95, 4.62, 0.0},
// {-3.59, 0.0, -3.95, -0.89, -0.15, 0.73, -4.18, 3.84, 0.0, 0.0},
// {0.0, 4.88, -1.48, 0.0, 2.64, 2.92, 0.0, 3.2, -2.29, 0.0},
// {0.66, -2.33, 0.0, -0.79, -3.2, -3.45, 3.14, -0.69, -0.77, 0.0},
// {-0.77, 4.17, 3.26, 0.82, 0.0, -2.26, -1.85, -3.1, 0.0, 0.0},
// {3.47, -3.16, -3.05, 0.0, 0.0, -3.26, 0.0, -2.98, -0.91, 0.0},
// {3.04, -2.01, -0.63, 1.62, -2.28, 1.83, -2.94, 2.53, 0.0, 0.0},
// {-3.75, -0.12, -4.43, 3.59, 3.98, -3.09, -1.9, 0.1, 0.0, 0.0},
// {2.74, 0.0, -3.56, -4.33, -0.88, -1.44, 3.67, -0.21, 0.0, 0.0},
// {0.0, -0.67, -0.04, -4.03, -3.75, -3.22, -0.01, -0.01, -5.0, 0.0},
// {4.55, -1.09, 0.3, 3.98, 0.0, 5.11, 2.52, -0.21, 0.0, 0.0},
// {-4.93, 4.42, 3.79, 2.86, -2.79, 4.84, -3.32, -2.05, 0.0, 0.0},
// {0.64, -1.7, 0.45, -0.66, -0.75, -1.53, 0.0, -1.52, 0.0, 0.0},
// {0.25, -2.16, 3.8, -1.42, -2.51, -1.57, -2.26, 0.0, 0.0, 0.0},
// {0.0, 2.94, -4.87, -3.71, 0.91, 1.9, 3.24, -1.73, 0.0, 0.0},
// {-0.69, 1.72, -2.55, -1.95, 3.29, 3.48, -1.23, 4.84, 0.0, 0.0},
// {0.4, 3.5, 2.66, 4.48, -4.2, 4.15, 0.83, -4.53, 4.19, 0.0},
// {-3.45, -3.18, -2.25, 0.0, -3.47, -3.4, -0.52, -2.64, 0.0, 0.0},
// {3.57, -4.06, -2.24, -1.05, 4.95, -1.85, -2.01, -4.83, 0.0, 0.0},
// {1.6, 2.25, 3.69, -2.25, 4.27, -1.59, -1.85, 0.0, 0.0, 0.0},
// {-1.14, 3.11, -2.0, -0.06, 1.17, -4.24, 2.44, 0.0, 0.0, 0.0},
// {0.0, -1.96, -2.02, -1.39, 0.84, -0.46, 2.82, -3.19, 0.0, 0.0},
// {0.42, 0.91, 3.5, -4.52, -1.01, -1.74, -3.51, -2.38, 0.0, 0.0},
// {1.07, -2.05, 2.7, 3.34, 1.17, -4.04, -1.51, -1.32, 0.0, 0.0},
// {5.0, 4.58, 4.92, 3.86, -2.23, 4.25, -0.41, -3.95, 0.0, 0.0},
// {3.7, -3.97, -1.34, 4.5, -2.99, 0.0, 2.7, 0.25, -4.65, 0.0},
// {-0.25, -1.63, -1.79, -0.19, 3.34, 4.02, 4.67, 0.0, 0.0, 0.0},
// {0.0, 1.94, 4.93, 1.06, 2.57, -1.35, -4.88, -0.24, 3.98, 0.0},
// {-2.21, 4.74, -4.01, 0.91, -5.05, 1.09, 3.14, 0.0, 0.0, 0.0},
// {1.77, 0.97, 1.58, -3.82, 4.28, -3.94, -2.89, -4.94, -3.5, 0.0},
// {-1.96, -3.08, 4.87, -2.98, 1.58, -0.24, -3.74, 0.0, 0.0, 0.0},
// {-0.27, 3.11, 2.35, 1.77, -0.37, -2.76, 4.61, 1.82, 0.0, 0.0},
// {3.69, 2.33, -0.83, -0.72, 0.58, -0.6, 3.11, -1.77, 0.0, 0.0},
// {-0.45, -3.64, 1.29, -1.42, 1.64, 4.19, -0.43, -3.35, 0.0, 0.0},
// {-4.1, -2.03, 4.04, 3.66, -2.62, -4.42, 3.71, 4.17, 0.0, 0.0},
// {2.1, -0.94, -2.19, -4.53, -0.94, 0.35, -1.22, 0.0, 0.0, 0.0},
// {-3.58, -3.16, 1.03, 2.31, -0.67, -1.7, 1.64, 3.48, 0.0, 0.0},
// {3.35, -3.86, -2.31, 3.19, -4.97, 2.92, -2.95, 0.0, 0.0, 0.0},
// {3.84, -2.04, 4.31, 1.81, -3.7, -4.48, 1.17, -2.55, -2.18, 0.0},
// {-4.55, -5.04, 0.68, 4.81, 1.47, -0.87, 0.0, 0.0, 0.0, 2.99},
// {-1.8, 4.47, 0.33, -3.05, -0.57, -4.63, 0.0, 0.0, 0.0, -3.9},
// {-4.77, -4.38, 5.03, 4.62, -0.86, 1.98, -3.36, 0.0, 0.0, 0.0},
// {3.51, -2.47, -3.15, 2.68, 4.65, 3.29, -1.31, 0.0, 0.0, 0.0},
// {-2.5, -0.96, -1.66, 2.0, -3.12, 0.25, 3.89, -3.02, 0.0, 0.0},
// {3.6, -1.1, -3.45, 0.53, 4.16, -4.18, 2.26, -4.84, 0.0, 0.0},
// {-3.32, 1.14, -3.72, 2.72, -4.77, -2.92, -2.93, -3.88, 0.0, 0.0},
// {-2.16, -3.08, -1.48, 4.64, 4.49, 3.89, 0.36, 0.0, 0.0, 0.0},
// {5.06, 4.34, -4.06, -3.67, -2.3, 4.37, 4.37, -0.99, 0.0, 0.0},
// {2.27, 2.38, -4.37, 1.54, 0.5, -2.37, 1.06, -3.12, 0.0, 0.0},
// {-4.2, 4.96, -2.54, 1.54, -1.63, 2.89, -2.16, -2.59, 0.0, 0.0},
// {-3.85, -1.68, -0.21, -1.13, -3.16, 3.71, -0.43, 5.01, 0.0, 0.0},
// {0.0, -2.16, 1.73, -4.31, -3.42, 1.5, -3.02, -4.72, 0.0, 0.0},
// {-1.76, -0.74, 2.01, -0.54, -4.46, 4.06, 3.22, -0.8, 0.0, 0.0},
// {4.25, -2.11, 4.68, 4.75, -1.83, 0.69, 4.9, -0.45, -4.18, 0.0},
// {-3.92, 4.58, 0.91, 2.27, 0.52, -4.97, 1.89, -1.86, 0.0, 0.0},
// {1.7, -3.14, -1.5, -5.0, 2.86, 4.01, 2.79, -2.54, -0.44, 0.0},
// {-4.84, -0.37, -2.92, 0.25, -1.75, 2.12, -3.52, -0.31, 0.0, 0.0},
// {-2.01, -1.28, -0.01, -2.61, -1.31, -4.7, 2.18, 2.03, -1.17, 0.0},
// {2.81, 4.62, 3.99, -5.0, -3.56, -0.68, 3.42, -0.95, 0.0, 0.0},
// {-3.77, 0.15, 3.95, 2.54, 3.93, 4.64, 1.85, 2.06, -2.46, 0.0},
// {-1.35, -2.7, -4.46, -1.93, -2.12, -1.13, 4.65, 3.55, 0.0, 0.0},
// {-1.88, -1.38, 4.84, -3.93, 3.57, -3.2, 1.68, 0.55, 0.0, 0.0},
// {4.04, -4.0, 1.96, -2.17, 1.56, 4.7, -3.56, 3.09, 0.0, 0.0},
// {4.9, -3.04, 4.67, 0.99, 4.95, 2.36, -4.38, -0.69, 0.0, 0.0},
// {4.73, -4.06, -2.37, 5.0, 0.38, 3.29, 4.38, -1.46, 0.0, 0.0},
// {4.92, 4.3, -2.87, 3.31, -2.05, -0.97, -2.01, -0.47, 0.0, 0.0},
// {3.09, 4.42, 3.47, 2.63, -4.0, 2.34, 2.44, -3.92, 0.0, 0.0},
// {-1.29, 3.41, -0.58, -2.11, 3.91, 5.14, -2.09, -0.16, 0.0, 0.0},
// {-4.55, 1.11, -3.0, -4.96, -0.08, 4.64, 2.84, -1.85, 0.0, 0.0},
// {0.04, -4.1, -1.24, -0.36, -1.66, -4.62, 1.2, 0.85, 0.0, 0.0}
// };

// { "answer": [83, 65, 81, 67, 34, 88, 62, 89, 5, 15] }--对了9个，第10和11弄错了

    /**
     * @brief 数据预处理
     */
    {
        Timer timer("Total data preprocessing");
        
        // 扩展数据维度
        expand_groups_dimension_inplace();
        // 扩展query维度
        expand_query_dimension_inplace();
        // 归一化查询和训练数据
        normalize_query_and_training();
        // 处理输入向量成一维->128*128
        process_groups_to_1d();
        
        // 并行重复拓展query_data
        query_data_exp32 = expand_query_data(128);
    }
        

    // 加密参数设置
    int num_slot_dis1 = 128;// 前三组group中有效距离的个数
    int num_slot = num_slot_dis1 * num_slot_dis1; // 最终的槽数16384
    // =============== 重要参数 =============== //
    int levels_required = 26;
    uint32_t ring_dim = 1 << 16; // 65536
    // double lowbound_dis = -0.6;
    // double upbound_dis = 0.6;
    // uint32_t sqrt_cheb_degree = 31; // 7层
    int sigmod_degree = 500; // Sigmoid的近似多项式的阶数
    int sigmod_scale = 1260; // Sigmoid的近似多项式的缩放因子
    vector<int> rotations_distance;
    // 距离转换的掩码
    vector<double> distance_mask1;
    vector<double> distance_mask2;

    // 创建距离掩码--每128个数字的第一个为1
    create_distance_mask(distance_mask1, num_slot_dis1, num_slot_dis1);

    // ============================ 针对128槽的加密上下文 ============================ //
    {
        Timer timer("Generating crypto context and rotation keys");
        hec.generate_context_knn(num_slot, levels_required, ring_dim, toy);
    }
    
    /**
    *@brief 初始数据编码成明文向量
    */
    Plain pt_data ,ptxt_query32;
    {
        Timer timer("Encoding plaintexts");
        
        #pragma omp parallel sections
        {
            #pragma omp section
            {
                pt_data = hec.encode(training_data_1d, 1, 0, num_slot);
                #pragma omp critical
                cout << "Training Data encode success!" << endl;
            }
            
            #pragma omp section
            {
                ptxt_query32 =  hec.encode(query_data_exp32, 1, 0, num_slot);
                #pragma omp critical
                cout << "Query32 encode success!" << endl;
            }
        }
    }

    /**
    *@brief 初始数据加密
    */
    Cipher ctdata, ctqry32;
    
    {
        Timer timer("Encrypting data");
        
        #pragma omp parallel sections
        {
            #pragma omp section
            {
                ctdata = hec.encrypt(pt_data);
                #pragma omp critical
                cout << "Training Data encrypt success!" << endl;
            }
            
            #pragma omp section
            {
                ctqry32 = hec.encrypt(ptxt_query32);
                #pragma omp critical
                cout << "Query32 encrypt success!" << endl;
            }
        }
    }
    cout << "Current depth is: " << levels_required - ctdata->GetLevel() << endl;

    /**
    *@brief 欧式距离计算
    */
    // 减法做差
    Cipher ctminus;
    
    {
        Timer timer("Subtraction");

        ctminus = hec.sub(ctdata, ctqry32)->Clone();
        cout << "Subtraction done!" << endl;
    }

    // 平方
    Cipher ctminus_square;
    
    {
        Timer timer("Squaring");

        ctminus_square = hec.square(ctminus)->Clone();
        cout << "Square done!" << endl;
    }
    cout << "Current depth is: " << levels_required - ctminus_square->GetLevel() << endl;

    // 新的处理方式
    auto ctdistance_square_before = ctminus_square->Clone();
    auto ctdistance_square_after = ctminus_square->Clone();
    // TODO 可以并行
    for(int i = 0; i < log2(num_slot_dis1); i++) {
        hec.add_inplace(ctdistance_square_before, hec.rot(ctdistance_square_before, pow(2, i)));
        hec.add_inplace(ctdistance_square_after,  hec.rot(ctdistance_square_after, -1*pow(2, i)));
    }

    vector<double> distance_square_bemask(num_slot, 0.0);
    vector<double> distance_square_afmask(num_slot, 0.0);
    for (int i = 0; i < num_slot_dis1; i++)
    {
        // 每一组的第一个为1.0
        distance_square_bemask[i * num_slot_dis1] = 1.0; 
        // 每一组的最后一个为1.0
        distance_square_afmask[i * num_slot_dis1 + num_slot_dis1 - 1] = 1.0;

    }
    auto pt_distance_square_bemask = hec.encode(distance_square_bemask, 1, ctdistance_square_before->GetLevel(), num_slot);
    auto pt_distance_square_afmask = hec.encode(distance_square_afmask, 1, ctdistance_square_after->GetLevel(), num_slot);
    auto ctdistance_square_bemask = hec.mult(ctdistance_square_before, pt_distance_square_bemask);
    auto ctdistance_square_afmask = hec.mult(ctdistance_square_after, pt_distance_square_afmask);
    for(int i = 0; i < log2(num_slot_dis1) - 1; i++) {
        hec.add_inplace(ctdistance_square_bemask, hec.rot(ctdistance_square_bemask, -1 * pow(2, i)));
        hec.add_inplace(ctdistance_square_afmask,  hec.rot(ctdistance_square_afmask, pow(2, i)));
    }
    auto ctdistance_rep = hec.add(ctdistance_square_bemask, ctdistance_square_afmask);

    vector<double> rep2exp_mask(num_slot, 0.0);
    // 掩码的生成，每一组128个数，第x组的第x个数是1，其余是0，只看前100组有效数字
    for (int i = 0; i < 100; i++) {
        rep2exp_mask[i * num_slot_dis1 + i] = 1.0;
    }

    // rep的mask，后28组全部是0
    vector<double> rep_mask(num_slot_dis1 * num_slot_dis1, 0.0);

    for (int i = 0; i < num_slot_dis1 * num_slot_dis1; i++) {
        if (i / num_slot_dis1 < 100) {  // 判断是第几组
            rep_mask[i] = 1.0;
        }
    }

    /**
     * @brief 计算repeat和expand
     * @todo 可以进行并行优化
     */
    Cipher ct_bemask, ct_afmask;
    // Cipher ctdistance_rep;
    Cipher ctdistance_exp;
    {
        Timer timer("Expand Ciphertext");

        auto pt_rep2exp_mask = hec.encode(rep2exp_mask, 1, ctdistance_rep->GetLevel(), num_slot);
        ctdistance_exp = hec.mult(ctdistance_rep, pt_rep2exp_mask)->Clone();

        auto pt_rep_mask = hec.encode(rep_mask, 1, ctdistance_rep->GetLevel(), num_slot);
        ctdistance_rep = hec.mult(ctdistance_rep, pt_rep_mask)->Clone();
    }
    cout << "Comsumed depth is: " << ctdistance_rep->GetLevel() << endl;
    cout << "Current depth is: " << levels_required - ctdistance_rep->GetLevel() << endl;
    
                                   
    /**
     * @brief 计算expand
     */
    // 利用repeat生成expand--不需要算第四组的
    {
        Timer timer("Expand Ciphertext");
        // 旋转求和
        for (int i = 0; i < log2(num_slot_dis1); i++) {
            hec.add_inplace(ctdistance_exp, hec.rot(ctdistance_exp, num_slot_dis1 * pow(2, i)));
        }
    }
    
    cout << "Comsumed depth is: " << ctdistance_exp->GetLevel() << endl;
    cout << "Current depth is: " << levels_required - ctdistance_exp->GetLevel() << endl;

    double distance_bound = 0.5;
    vector<double> const06_exp(num_slot_dis1 * num_slot_dis1, distance_bound);
    vector<double> const06_rep(num_slot_dis1 * num_slot_dis1, distance_bound);
    // 将每组的前100个数据设为0
    for (int group = 0; group < num_slot_dis1; group++) {
        for (int i = 0; i < 100; i++) {
            const06_exp[group * num_slot_dis1 + i] = 0.0;
        }
    }
    // const06_rep: 前100组设为0，后28组保持0.6
    for (int group = 0; group < 100; group++) {
        for (int i = 0; i < num_slot_dis1; i++) {
            const06_rep[group * num_slot_dis1 + i] = 0.0;
        }
    }
    auto pt_const06_exp = hec.encode(const06_exp, 1, ctdistance_exp->GetLevel(), num_slot);
    auto pt_const06_rep = hec.encode(const06_rep, 1, ctdistance_rep->GetLevel(), num_slot);
    ctdistance_exp = hec.add(ctdistance_exp, pt_const06_exp);
    ctdistance_rep = hec.add(ctdistance_rep, pt_const06_rep);

    // rep和exp做差得到delta,利用sigmod将delta计算成mask,以此来讲distance转换成index
    auto ctdistance_del = hec.sub(ctdistance_exp, ctdistance_rep);

    // 合并计算sigmod(tanh(10*x))
    auto ct_distance_mask = hec.sigmoid_tanh(ctdistance_del, sigmod_degree, sigmod_scale, 10); 

    auto ctindex = ct_distance_mask->Clone();
    
    // 旋转求和，得到整体数据的index
    for(int i = 0; i < log2(num_slot_dis1); i++) {
        hec.add_inplace(ctindex, hec.rot(ctindex, num_slot_dis1 * pow(2, i)));
    }

    auto ctdistance2index_mask = hec.add(ctindex, -11.0);

    vector<double> backminus30(num_slot_dis1 * num_slot_dis1, 0.0); // 先全部初始化为0
    // 填充每组的后28个元素为-30
    for (int i = 0; i < num_slot_dis1; i++) {
        for (int j = 100; j < 128; j++) {
            backminus30[i * 128 + j] = -30.0;
        }
    }
    auto pt_backminus30 = hec.encode(backminus30, ctdistance2index_mask->GetLevel(), num_slot);

    ctdistance2index_mask = hec.add(ctdistance2index_mask, pt_backminus30);
    // 索引先归一化
    ctdistance2index_mask = hec.mult(ctdistance2index_mask, 1.0/90.0); 
    // 变成0和1
    // TODO 可能会有0.5，这里先不考虑--后面用阈值当作噪声处理
    auto ctindex_exp_mask = hec.sigmoid_tight(ctdistance2index_mask, 1, sigmod_degree, sigmod_scale);
    cout << "Comsumed depth is: " << ctindex_exp_mask->GetLevel() << endl;
    cout << "Current depth is: " << levels_required - ctindex_exp_mask->GetLevel() << endl;

    // 原始数据的排列索引，从1~128的重复
    vector<double> ctoriginindex(num_slot_dis1 * num_slot_dis1, 0.0);
    for (int group = 0; group < num_slot_dis1; ++group) {
        for (int i = 0; i < num_slot_dis1; ++i) {
            ctoriginindex[group * num_slot_dis1 + i] = static_cast<double>(i + 1);
        }
    }
    auto pt_originindex = hec.encode(ctoriginindex, 1, ctindex_exp_mask->GetLevel(), num_slot);

    auto ctindex_exp = hec.mult(ctindex_exp_mask, pt_originindex);

    cout << "Comsumed depth is: " << ctindex_exp->GetLevel() << endl;
    cout << "Current depth is: " << levels_required - ctindex_exp->GetLevel() << endl;

    // 解密结果
    Plain result1, result2, result3, result4, result5, result6;
    
    {
        Timer timer("Decryption");
        
        result1 = hec.decrypt(ctdistance_exp);
        result2 = hec.decrypt(ctdistance_rep);
        // result3 = hec.decrypt(ctdistance_del_pro);
        result4 = hec.decrypt(ct_distance_mask);
        result5 = hec.decrypt(ctindex_exp);
        // result6 = hec.decrypt(ctindex_rep);
    }
    
    result1->SetLength(static_cast<size_t>(num_slot_dis1));
    // result2->SetLength(static_cast<size_t>(num_slot_dis1));
    // result3->SetLength(static_cast<size_t>(num_slot_dis1));
    // result4->SetLength(static_cast<size_t>(num_slot_dis1));
    result5->SetLength(static_cast<size_t>(num_slot_dis1));


    // cout << "result1:" << result1 << endl;
    // cout << "result2:" << result2 << endl;
    // cout << "result3:" << result3 << endl;
    // cout << "result4:" << result4 << endl;
    // cout << "result5:" << result5 << endl;
    // cout << "result6:" << result6 << endl;
    
    vector<int> result_index;
    int j = 0;
    
    for(size_t i=0; i < result5->GetLength(); i++) {
        if(result5->GetCKKSPackedValue()[i].real() > 0.98){
            result_index.push_back(static_cast<int>(round(result5->GetCKKSPackedValue()[i].real())));
        }
    }
    // 后处理：检查并清理result_index--清理异常值
    if(result_index.size() > 10) {
        // 使用迭代器删除非递增元素
        auto it = result_index.begin();
        while(it != result_index.end() && result_index.size() > 10) {
            // 检查当前元素是否比前一个元素小或相等（非严格递增）
            if(it != result_index.begin() && *it <= *(it - 1)) {
                // 发现异常值，删除当前元素
                it = result_index.erase(it);
            } else {
                // 当前元素正常，继续下一个
                ++it;
            }
        }
        result_index.resize(10); // 确保结果最多10个
    }

    cout << "{ \"answer\": [ ";
    for(size_t i=0; i < result_index.size(); i++) {
        cout << result_index[i];
        j++;
        if(j<10){
            cout << ", ";
        } else {
            break; // 只输出前10个结果
        }
    }
    cout << " ] }" << endl;

    auto total_end = chrono::high_resolution_clock::now();
    auto total_duration = chrono::duration_cast<chrono::milliseconds>(total_end - total_start);
    cout << "\n[TIMING] Total execution time: " << total_duration.count()/1000.0 << " s" << endl;
    
    return 0;
}